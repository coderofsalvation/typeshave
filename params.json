{"name":"TYPESHAVE!","tagline":"website of typeshave: typesafe functions for PHP and Javascript","body":"Typeshave\r\n=========\r\nGuard your function's incoming data using typeshave wrappers in JAVASCRIPT & PHP.\r\n\r\n<center>\r\n<img src=\"https://camo.githubusercontent.com/c784f14f7c15fec9fa475bd2789be46d2cb96943/687474703a2f2f636f6465726f6673616c766174696f6e2e6769746875622e696f2f7479706573686176652f6c6f676f2e706e67\"/>\r\n</center>\r\n\r\nPrevent functions from exploding with garbage-in garbage-out.\r\n\r\n## BROWSER\r\n\r\n    <script src=\"https://raw.githubusercontent.com/coderofsalvation/typeshave.js/master/browser/typeshave.min.js\"></script>\r\n    <script>\r\n      typeshave = require(\"typeshave\").typesafe;\r\n\r\n      var foo = typeshave({\r\n        foo: { type: \"string\" },\r\n        bar: { type: \"boolean\" }\r\n      }, function(foo,bar){\r\n        alert(\"ok data passed!\");\r\n      });\r\n\r\n      foo( \"string\", true );\r\n    </script>\r\n\r\n\r\n## NODEJS / COFFEESCRIPT\r\n\r\nsee the npm module [here](https://www.npmjs.com/package/typeshave)\r\n\r\n## PHP \r\n\r\nsee the composer more [here](https://packagist.org/packages/coderofsalvation/typeshave) or the github repo [here](https://github.com/coderofsalvation/typeshave.php)\r\n\r\n## =hy non-typesafe is great, but not with PHAT objects\r\n\r\nFor example:\r\n\r\n* REST payloads \r\n* objects which represent configs or options \r\n* datastructures and resultsets for html-rendering or processing purposes\r\n\r\nAre you still passing phat data around `fingers-crossed`-style?\r\nStill wondering why functions like this explode once in a while? :D\r\n\r\n    JS:  foo( { foo:\"bar\", bar: 123, records: [ 1, 2 ] } );\r\n    PHP: foo( (object)array( \"foo\"=>\"bar\", \"bar\"=>123, \"records\": array( 1, 2 )) );\r\n\r\nDid you you try PITA-fying your code with if/else checks?\r\n\r\n    JS: if( data == undefined data.bar == undefined || bar == undefined || Argh this is a big PITA \r\n    JS: // omg how do I even check properties recursively?\r\n    JS: // now finally we can do what the function should do :/\r\n\r\nand in PHP\r\n\r\n    PHP: function foo($data){\r\n    PHP:   if( isset($data)          && \r\n    PHP:       is_object($data)      && \r\n    PHP:       isset($data->foo)     && \r\n    PHP:       is_string($data->foo) &&\r\n    PHP:       .. \r\n    PHP:       && \r\n    PHP:       .. \r\n    PHP:       && Argh this is a big PITA \r\n    PHP:   // omg how do I even check properties recursively?\r\n    PHP:   foreach( $data->records as $record ){\r\n    PHP:     // PITA \r\n    PHP:     // PITA \r\n    PHP:     // PITA \r\n    PHP:   }\r\n    PHP:   ...\r\n    PHP:   // now finally we can do what the function should do :/\r\n    PHP: }\r\n\r\n## Conclusion\r\n\r\nWith typeshave you can replace all that with one line of code.\r\nNo more :\r\n\r\n* functions going out of control\r\n* assertions-bloat inside functions \r\n* complaining about javascript not being typesafe\r\n* unsafe recursive datastructures \r\n* verbose unittests doing typesafe stuff \r\n\r\nTypeshave deals with problems immediately when they occur to prevent this:\r\n\r\n<center><img src=\"http://www.gifbin.com/bin/102009/1256553541_exploding-trash.gif\"/></center>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}